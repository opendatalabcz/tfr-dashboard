version: "3.8"

services:

  postgres:
    image: postgres:14
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./storage/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?Postgres password}
      POSTGRES_USER: ${POSTGRES_USER?Postgres username}
      POSTGRES_DB: ${POSTGRES_DB?Postgres DB name}
    healthcheck:
      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"
      interval: 15s
      timeout: 2s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - postgres
    restart: always
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - 5050:80
    networks:
      - backend
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL?PgAdmin email}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD?PgAdmin password}

  api:
    image: postgrest/postgrest
    depends_on:
      - postgres
    networks:
      - backend
    ports:
      - "5051:3000"
    environment:
      PGRST_DB_URI: postgres://${POSTGREST_USER?}:${POSTGREST_PASSWORD?}@postgres:5432/${POSTGRES_DB?}
      PGRST_DB_SCHEMA: ${POSTGREST_SCHEMA?}
      PGRST_DB_ANON_ROLE: ${POSTGREST_ANON_ROLE?}
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:5051

  swagger:
    image: swaggerapi/swagger-ui
    depends_on:
      - api
    ports:
      - "5052:8080"
    environment:
      API_URL: http://localhost:5051/

  data:
    build: data
    networks:
      - backend
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?Postgres password}
      POSTGRES_USER: ${POSTGRES_USER?Postgres username}
      POSTGRES_DB: ${POSTGRES_DB?Postgres DB name}

networks:
  backend:
    driver: bridge

volumes:
  postgres:
  pgadmin:
